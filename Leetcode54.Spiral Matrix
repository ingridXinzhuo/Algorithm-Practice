//Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.
/* example:
Input:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
Output: [1,2,3,6,9,8,7,4,5]
*/
//treat as a loop of reaching elements horizontally and vertically
// 1 -> 2
// |    |
// 4 <- 3
//Solution

import java.util.*;
class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> spiralList = new ArrayList<>();
        if (matrix.length == 0){
            return spiralList;
        }
        int rowStart = 0;
        int rowEnd = matrix.length - 1;
        int columnStart = 0;
        int columnEnd = matrix[0].length - 1;
        while (rowStart <= rowEnd && columnStart <= columnEnd){
        //horizontally to right ->
            for (int i = columnStart; i <= columnEnd; i++){
                spiralList.add(matrix[rowStart][i]);
            }
            rowStart ++;
         //vertically to bottom |
            for (int i = rowStart; i <= rowEnd; i++){
                spiralList.add(matrix[i][columnEnd]);
            }
            columnEnd --;
          //horiziontally to left <-
            if (rowStart <= rowEnd){
                for (int i = columnEnd; i >= columnStart; i--){
                    spiralList.add(matrix[rowEnd][i]);
                }
                rowEnd --;
            }
          //vertically to top |
            if (columnStart <= columnEnd){
                for (int i = rowEnd; i >= rowStart; i--){
                     spiralList.add(matrix[i][columnStart]);
                }
                columnStart ++;
            }
           
        }
         return spiralList;
            
    }
}
